// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use crate::{
    db::schema::{posts, users},
    utils::hashing::hash_password,
};
use chrono::NaiveDateTime;
use diesel::{
    AsChangeset, Insertable, QueryDsl, Queryable, RunQueryDsl, Selectable, SelectableHelper,
};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Queryable, Selectable, Serialize, Debug)]
#[diesel(table_name = crate::db::schema::posts)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct Post {
    pub id: String,
    pub title: String,
    pub body: String,
    pub published: bool,
    pub user_id: Option<String>,
    pub created_at: NaiveDateTime,
    pub updated_at: Option<NaiveDateTime>,
}

#[derive(Queryable, Selectable, Serialize, Debug)]
#[diesel(table_name = crate::db::schema::users)]
#[diesel(check_for_backend(diesel::pg::Pg))]
pub struct User {
    pub id: String,
    pub name: String,
    pub email: String,
    pub password: Option<String>,
    pub verified: bool,
    pub created_at: NaiveDateTime,
    pub updated_at: Option<NaiveDateTime>,
}

#[derive(Insertable, Serialize, Deserialize)]
#[diesel(table_name = users)]
pub struct CreateUser {
    pub id: String,
    pub name: String,
    pub email: String,
    pub password: String,
}

impl CreateUser {
    pub fn new(name: String, email: String, password: String) -> Result<Self, String> {
        match hash_password(password) {
            Ok(hashed_password) => Ok(CreateUser {
                id: Uuid::new_v4().to_string(),
                name,
                email,
                password: hashed_password,
            }),
            Err(e) => Err(format!("Error hashing password: {}", e).into()),
        }
    }
}

#[derive(Insertable, Serialize, Deserialize)]
#[diesel(table_name = posts)]
pub struct CreatePost {
    pub id: String,
    pub title: String,
    pub body: String,
    pub user_id: String,
}

impl CreatePost {
    pub fn new(title: String, body: String, user_id: String) -> Self {
        CreatePost {
            id: Uuid::new_v4().to_string(),
            title,
            body,
            user_id,
        }
    }
}
